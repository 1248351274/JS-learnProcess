原型链

原型链查找规则，就近原则

构造函数的继承
function foo（）{
	console.log(this)
}
obj={
name：“zhNG”
}

call：foo.call(obj,'参数')改变this指向
apply：foo.apply(obj,['参数'])改变this指向
bind：foo.bind(obj)('参数')

通过call，apply，bind继承父级
Dad.call(this,'参数')

原型链继承

子类的原型链 = 父类的原型链（影响，影响父类的传址）

传址

复杂的数据类型
除了简单数据类型：number string boolean null 
 undefined
 
 复杂的数据类型 防止互相影响
 深拷贝
 undefined和function会丢失
 JSON.parse(JSON.stringify(DadProto))
 
 深拷贝的函数拷贝
 
 function deepCopy（obj）{
   let newObj = Array.isArray(obj)?[]:{}
   for(let key in obj){
   if(obj.hasOwnProperty[key]){
		if(typeof obj[key] === 'object'){
			newObj[key] = deepCopy（obj[key]）
		}else{
			newObj[key] = obj[key]
		}
   }
   return newObj
   
 }